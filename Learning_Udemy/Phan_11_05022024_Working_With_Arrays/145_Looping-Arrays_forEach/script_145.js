'use strict';

const movements = [200, 450, -400, 3000, -650, -130, 70, 1300]; 

// TODO 1) 
for (const item of movements) {
    if(item > 0){
        console.log(`User ƒë√£ n·∫°p ${item} ti·ªÅn`);
    }else{
        console.log(`User ƒë√£ r√∫t ${item} ti·ªÅn`);
    }
}

// TODO 2)
console.log('================================');
movements.forEach(
    function (mov){ //? C√°c ph·∫ßn t·ª≠ c·ªßa arr "movements" s·∫Ω ƒëc truy·ªÅn th√¥ng qua bi·∫øn 'mov'
        if(mov > 0){
            console.log(`User ƒë√£ n·∫°p ${mov} ti·ªÅn`);
        }else{
            console.log(`User ƒë√£ r√∫t ${mov} ti·ªÅn`);
        }
    }
);
        /**
         * üëÄ C√°ch ho·∫°t ƒë·ªông c·ªßa forEach 
         * L·∫ßn l·∫∑p === h√†nh ƒë·ªông
         *    0         function(200)
         *    1         function(450)
         *    2         function(-400)
         *   ...        ......
         */

// TODO 3) 
console.log('================================');
for (const [index, value] of movements.entries()) {
    if(value > 0){
        console.log(`Movement ${index + 1}: User n·∫°p ${value} ti·ªÅn`);
    }else{
        console.log(`Movement ${index + 1}: User r√∫t ${value} ti·ªÅn`);
    }
}

// TODO 4) 
console.log('================================');
movements.forEach(
    function (value, index, arr){
        if(value > 0){
            console.log(`Movement ${index + 1}: User n·∫°p ${value} ti·ªÅn`);
        }else{
            console.log(`Movement ${index + 1}: User r√∫t ${value} ti·ªÅn`);
        }
    }
);
    /**
     * ? value, index, arr ch√≠nh l√† (gi√° tr·ªã ph·∫ßn t·ª≠, v·ªã tr√≠ ph√¢n t·ª≠, arr ch·ª©a ph·∫ßn t·ª≠ ƒë√≥)
     * ! C√°i gi·∫£i th√≠ch tr√™n l√† √°p d·ª•ng v·ªõi 1 arr b√¨nh th∆∞·ªùng, c√≤n v·ªõi arr nh∆∞ Map/Set th√¨ ƒë·ªÉ b√†i sau
     * ! ƒêi·ªÉm y·∫øu l·ªõn nh·∫•t c·ªßa forEach l√† kh√¥ng th·ªÉ 'break' ho·∫∑c 'continue' ƒë∆∞·ª£c
     */
