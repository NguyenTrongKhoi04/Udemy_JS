'use strict';

/////////////////////////////////////////////////
/////////////////////////////////////////////////
// BANKIST APP

// Data
const account1 = {
  owner: 'Jonas Schmedtmann',
  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],
  interestRate: 1.2, // %
  pin: 1111,
};

const account2 = {
  owner: 'Jessica Davis',
  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],
  interestRate: 1.5,
  pin: 2222,
};

const account3 = {
  owner: 'Steven Thomas Williams',
  movements: [200, -200, 340, -300, -20, 50, 400, -460],
  interestRate: 0.7,
  pin: 3333,
};

const account4 = {
  owner: 'Sarah Smith',
  movements: [430, 1000, 700, 50, 90],
  interestRate: 1,
  pin: 4444,
};

const accounts = [account1, account2, account3, account4];

// Elements
const labelWelcome = document.querySelector('.welcome');
const labelDate = document.querySelector('.date');
const labelBalance = document.querySelector('.balance__value');
const labelSumIn = document.querySelector('.summary__value--in');
const labelSumOut = document.querySelector('.summary__value--out');
const labelSumInterest = document.querySelector('.summary__value--interest');
const labelTimer = document.querySelector('.timer');

const containerApp = document.querySelector('.app');
const containerMovements = document.querySelector('.movements');

const btnLogin = document.querySelector('.login__btn');
const btnTransfer = document.querySelector('.form__btn--transfer');
const btnLoan = document.querySelector('.form__btn--loan');
const btnClose = document.querySelector('.form__btn--close');
const btnSort = document.querySelector('.btn--sort');

const inputLoginUsername = document.querySelector('.login__input--user');
const inputLoginPin = document.querySelector('.login__input--pin');
const inputTransferTo = document.querySelector('.form__input--to');
const inputTransferAmount = document.querySelector('.form__input--amount');
const inputLoanAmount = document.querySelector('.form__input--loan-amount');
const inputCloseUsername = document.querySelector('.form__input--user');
const inputClosePin = document.querySelector('.form__input--pin');

/////////////////////////////////////////////////
/////////////////////////////////////////////////
// LECTURES

const currencies = new Map([
  ['USD', 'United States dollar'],
  ['EUR', 'Euro'],
  ['GBP', 'Pound sterling'],
]);

const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

const displayMovements = function (movements,sort = false) {
  containerMovements.innerHTML = '';

  const mov = sort ? movements.slice().sort((a,b)=>a-b) : movements;

  mov.forEach(function (mov, i) {
    const type = mov > 0 ? 'deposit' : 'withdrawal';

    const html = `
      <div class="movements__row">
        <div class="movements__type movements__type--${type}">${
      i + 1
    } ${type}</div>
        <div class="movements__value">${mov}‚Ç¨</div>
      </div>
    `;

    containerMovements.insertAdjacentHTML('afterbegin', html);
  });
};

// T√≠nh T·ªïng ti·ªÅn hi·ªán c√≥
const calcDisplayBalance = function (acc) {
  acc.balance = acc.movements.reduce((acc, mov) => acc + mov, 0);
  labelBalance.textContent = `${acc.balance}‚Ç¨`;
};

const calcDisplaySummary = function (acc) {
  const incomes = acc.movements
    .filter(mov => mov > 0)
    .reduce((acc, mov) => acc + mov, 0);
  labelSumIn.textContent = `${incomes}‚Ç¨`;

  const out = acc.movements
    .filter(mov => mov < 0)
    .reduce((acc, mov) => acc + mov, 0);
  labelSumOut.textContent = `${Math.abs(out)}‚Ç¨`;

  const interest = acc.movements
    .filter(mov => mov > 0)
    .map(deposit => (deposit * acc.interestRate) / 100)
    .filter((int, i, arr) => {
      // console.log(arr);
      return int >= 1;
    })
    .reduce((acc, int) => acc + int, 0);
  labelSumInterest.textContent = `${interest}‚Ç¨`;
};

const createUsernames = function (accs) {
  accs.forEach(function (acc) {
    acc.username = acc.owner
      .toLowerCase()
      .split(' ')
      .map(name => name[0])
      .join('');
  });
};
createUsernames(accounts);

// load d·ªØ li·ªáu kh√°ch h√†ng (d√πng cho update view sau khi lm 1 c√°i g√¨ ƒë√≥) 
const updateUI = function (acc){
       // Display movements
       displayMovements(acc.movements);
      
       // Display balance
       calcDisplayBalance(acc);
   
       // Display summary
       calcDisplaySummary(acc);
}

var currentAccount;// bi·∫øn ch·ª©a th√¥ng tin t√†i kho·∫£n khi login th√†nh c√¥ng
btnLogin.addEventListener('click',function (e){
    e.preventDefault();

    currentAccount = accounts.find(acc => acc.username === inputLoginUsername.value);
    
    if(currentAccount?.pin === Number(inputLoginPin.value)){
        inputLoginPin.value = inputLoginUsername.value = '';

        inputLoginPin.blur();
        
        labelWelcome.textContent = `Welcome back, ${currentAccount.owner.split(' ')[0]}`;

        containerApp.style.opacity = 100
        
        updateUI(currentAccount);
    }
})

btnTransfer.addEventListener('click', function(e){
    e.preventDefault();
        // s·ªë ti·ªÅn mu·ªën chuy·ªÉn 
        const amount = Number(inputTransferAmount.value);

        // username tk ƒëc chuy·ªÉn ƒë·∫øn 
        const receiverAcc = accounts.find(acc => acc.username === inputTransferTo.value);

        // x√≥a value input sau khi submit chuy·ªÉn
        inputTransferAmount.value = inputTransferTo.value = '';

        // x√≥a m·∫∑c ƒë·ªãnh tr·ªè chu·ªôt v√†o th·∫ª input sau khi submit chuy·ªÉn ti·ªÅn
        inputTransferAmount.blur(); 
        inputTransferTo.blur();

        if(amount > 0 // s·ªë ti·ªÅn chuy·ªÉn > 0
            && receiverAcc // ktra t·ªìn t·∫°i tk nh·∫≠n ti·ªÅn
            && currentAccount.balance >= amount // s·ªë ti·ªÅn chuy·∫øn <= s·ªë d∆∞ tk
            && receiverAcc?.username !== currentAccount.username // validate k chuy·ªÉn ƒëc cho ch√≠nh m√¨nh
        ){ 
             // Tr·ª´ ti·ªÅn t√†i kho·∫£n, giao d·ªãch n√†y s·∫Ω xu·∫•t hi·ªán trong list giao d·ªãch
             currentAccount.movements.push(-amount);

             // T√†i kho·∫£n ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn s·∫Ω c·ªông th√™m ti·ªÅn 
             receiverAcc.movements.push(amount);

             // load l·∫°i view
             updateUI(currentAccount);
        }
        else{alert('Xem l·∫°i tk mu·ªën chuy·ªÉn');}
});

// Vay ti·ªÅn theo l√£i su·∫•t
btnLoan.addEventListener('click', function(e){
  e.preventDefault();
  
  const amount = Number(inputLoanAmount.value);
  
  if(amount > 0 && currentAccount.movements.some(value => value >= amount*0.1)){
    currentAccount.movements.push(amount);

    // Update UI
    updateUI(currentAccount);
  }

  inputLoanAmount.value = ''
})

// User x√≥a t√†i kho·∫£n khi ko mu·ªën d√πng n·ªØa 
btnClose.addEventListener('click',function(e){
      e.preventDefault();

      if(inputCloseUsername.value === currentAccount.username
          && Number(inputClosePin.value)===currentAccount.pin){
            
            const index = accounts.findIndex(acc => acc.username === currentAccount.username);

            accounts.splice(index,1); // x√≥a 1 ph·∫ßn t·ª≠ b·∫Øt ƒë·∫ßu ·ªü v·ªã tr√≠ c·ªßa "index"
            // console.log(accounts);

            containerApp.style.opacity = 0;          
      }
      inputCloseUsername.value = inputClosePin.value = '';
})


const arr = [1,2,3,4,5,6,7];

// TODO 1)
console.log(new Array([1,2,3,4,5,6,7]));
console.log(new Array(arr));

const x = new Array(7);
console.log(x);

// TODO 2)
x.fill(1,3,5);
console.log(x);
x.fill(1)
console.log(x);

// TODO 3) cho v√†i v√≠ d·ª• ƒë·ªÉ cho b l√∫ r·ªìi m·ªõi gi·∫£i th√≠ch üòÇ
// S·ª≠ d·ª•ng h√†m √°nh x·∫°
const numbers = [1, 2, 3, 4];
const squaredNumbers = Array.from(numbers, x => x * x);
console.log(squaredNumbers); // [1, 4, 9, 16]

const y = Array.from({length: 7}, () => 1);
const z = Array.from({length: 7}, (value, index) => index+1);
console.log(z);
      /**
       * ! nh·ªØng L∆∞u √Ω v·ªÅ from
       *      ? from s·∫Ω nh·∫≠n v√†o 1 arr ho·∫∑c 1 d·ªØ li·ªáu c√≥ th·ªÉ "Iteration - tr·∫£i ra"
       *      ? from s·∫Ω ∆∞u ti√™n ƒë·ªçc thu·ªôc t√≠nh "length" trong obj
       *      ? func ƒëc √°nh x·∫° trong method "from" c√≥ ƒë·ªëi s·ªë gi·ªëng nh∆∞ method "map()", n√≥ s·∫Ω l√†m vi·ªác v·ªõi t·ª´ng ph·∫ßn t·ª≠ 
       */ 
    // * S·ª± kh√°c bi·ªát gi·ªØa map v√† from ü§î
/**
 +> Array.from(): Ph∆∞∆°ng th·ª©c n√†y t·∫°o m·ªôt m·∫£ng m·ªõi t·ª´ m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ l·∫∑p l·∫°i ho·∫∑c m·ªôt chu·ªói. 
      N√≥ c≈©ng c√≥ th·ªÉ chuy·ªÉn ƒë·ªïi m·∫£ng-like object ho·∫∑c iterable th√†nh m·ªôt m·∫£ng JavaScript chu·∫©n. 
      Th·ª© hai tham s·ªë c√≥ th·ªÉ l√† m·ªôt h√†m √°nh x·∫°, nh∆∞ng kh√¥ng ƒë∆∞·ª£c g·ªçi l√† m·ªôt h√†m callback. 
 +> map(): Ph∆∞∆°ng th·ª©c map() t·∫°o m·ªôt m·∫£ng m·ªõi t·ª´ m·∫£ng hi·ªán t·∫°i b·∫±ng c√°ch g·ªçi m·ªôt h√†m callback m·ªôt 
      l·∫ßn cho m·ªói ph·∫ßn t·ª≠ trong m·∫£ng, v√† x√¢y d·ª±ng m·ªôt m·∫£ng m·ªõi t·ª´ c√°c gi√° tr·ªã tr·∫£ v·ªÅ c·ªßa h√†m callback.
      H√†m callback trong map() ƒë∆∞·ª£c g·ªçi v·ªõi c√°c ƒë·ªëi s·ªë sau: (value, index, array).

 * ? D∆∞·ªõi ƒë√¢y l√† v√≠ d·ª• th√™m v·ªÅ from 
 */

        // V√≠ d·ª• s·ª≠ d·ª•ng Array.from() ƒë·ªÉ chuy·ªÉn ƒë·ªïi m·ªôt chu·ªói th√†nh m·ªôt m·∫£ng c√°c k√Ω t·ª±:
        const str = 'hello';
        const charsArray = Array.from(str);
        console.log(charsArray); // ['h', 'e', 'l', 'l', 'o']

        // V√≠ d·ª• s·ª≠ d·ª•ng Array.from() v·ªõi m·ªôt iterable (v√≠ d·ª•: Set)
        const set = new Set([1, 2, 3, 4, 5]);
        const arrayFromSet = Array.from(set);
        console.log(arrayFromSet); // [1, 2, 3, 4, 5]

        // V√≠ d·ª• s·ª≠ d·ª•ng Array.from() v·ªõi m·ªôt m·∫£ng-like object
        const arrayLike = { length: 3, 0: 'a', 1: 'b', 2: 'c' };
        const arrayFromArrayLike = Array.from(arrayLike);
        console.log(arrayFromArrayLike); // ['a', 'b', 'c']

        // V√≠ d·ª• s·ª≠ d·ª•ng Array.from() v·ªõi m·ªôt h√†m √°nh x·∫°
        const arrayFromMapping = Array.from(arrayLike, (value) => value.toUpperCase());
        console.log(arrayFromMapping); // ['A', 'B', 'C']


// TODO 4) 
labelBalance.addEventListener('click',function(){
    // // ! Hard code
    //   const movementUI = Array.from(querySelectorAll());   
    //   // console.log(movementUI);
    //   console.log(movementUI.map(valueStr => Number(valueStr.textContent.replace('‚Ç¨',' '))));

    // ! clean code
    const movementUI = Array.from(document.querySelectorAll('.movements__value'), value => Number(value.textContent.replace("‚Ç¨", "")));
    console.log(movementUI);

    // var canIterable = [...document.querySelectorAll('.movements__value')];
    // var canIterable1 = document.querySelectorAll('.movements__value');
})
