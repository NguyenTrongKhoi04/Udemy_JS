'use strict';

let arr =['a','b','c','d','e'];
const arr2 = ['j', 'i', 'h', 'g', 'f'];

// TODO 1)
console.log(arr.slice(2));
console.log(arr.slice(2, 4));
console.log(arr.slice(-2));
console.log(arr.slice(-1));
console.log(arr.slice(1, -2));
console.log(arr.slice());
    // ! slice tr·∫£ ra 1 b·∫£n sao 
// TODO 2)
    /**
     * kh√¥ng c√≥ s·ª± kh√°c bi·ªát v·ªÅ output. n·∫øu ch·ªâ l√† gom ph·∫ßn t·ª≠ thif2 c√°ch nh∆∞ nhau 
     * ! Nh∆∞ng c√°ch d√πng 'slice()' th√¨ s·∫Ω n·ªëi ƒë∆∞·ª£c method ti·∫øp theo v√†o sau ƒë√≥ lu√¥n c√≤n destructor th√¨ kh√¥ng
     */

// TODO 3)
arr.splice(2,3); // 2 l√† v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·∫Øt, 3 l√† s·ªë ph·∫ßn t·ª≠ ƒë∆∞·ª£c c·∫Øt 
    /**
     * * H√†m splice() cho ph√©p x√≥a 1 ho·∫∑c nhi·ªÉu ph·∫ßn t·ª≠, n√≥ t√°c ƒë·ªông th·∫≥ng v√†o m·∫£ng g·ªëc 
     * ! C√∫ ph√°p h√†m splice kh√°c so v·ªõi slice 
     *      ! =>> splice(index_start, count_delete)
     *      ! =>> slice(index_start, index_end)
     */

// TODO 4) 
arr2.reverse(); // <=> console.log(arr2.reverse());
console.log(arr2);

// TODO 5) 
arr =['a','b','c','d','e']; // vi·∫øt l·∫°i ƒë·ªÉ t√Ω n·ªëi m·∫£ng cho ƒë·∫πp üòä
console.log([...arr,...arr2]);
const letters = arr.concat(arr2);console.log(letters); 
    // ! 2 c√°ch n√†y nh∆∞ nhau nh∆∞ng mu·ªën n·ªëi th√™m '.method' => use concat

// TODO 6) 
console.log(letters.join(' - '));

// TODO 7)
    /**
     * ? pop() => Lo·∫°i b·ªè ph·∫ßn t·ª≠ cu·ªëi c√πng c·ªßa m·∫£ng v√† tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë√≥.
     * ? Shift() =>  Lo·∫°i b·ªè ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c·ªßa m·∫£ng v√† tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë√≥.
     * ? push() => Th√™m m·ªôt ho·∫∑c nhi·ªÅu ph·∫ßn t·ª≠ v√†o cu·ªëi m·∫£ng v√† tr·∫£ v·ªÅ ƒë·ªô d√†i m·ªõi c·ªßa m·∫£ng.
     * ? unshift() => Th√™m m·ªôt ho·∫∑c nhi·ªÅu ph·∫ßn t·ª≠ v√†o ƒë·∫ßu m·∫£ng v√† tr·∫£ v·ªÅ ƒë·ªô d√†i m·ªõi c·ªßa m·∫£ng.
     * ? indexOf(): Tr·∫£ v·ªÅ ch·ªâ m·ª•c ƒë·∫ßu ti√™n c·ªßa m·ªôt ph·∫ßn t·ª≠ trong m·∫£ng n·∫øu n√≥ t·ªìn t·∫°i, n·∫øu kh√¥ng tr·∫£ v·ªÅ -1.
     * ? lastIndexOf(): Tr·∫£ v·ªÅ ch·ªâ m·ª•c cu·ªëi c√πng c·ªßa m·ªôt ph·∫ßn t·ª≠ trong m·∫£ng n·∫øu n√≥ t·ªìn t·∫°i, n·∫øu kh√¥ng tr·∫£ v·ªÅ -1.
     * ? split(): Chia m·ªôt chu·ªói th√†nh m·ªôt m·∫£ng c√°c chu·ªói con d·ª±a tr√™n m·ªôt chu·ªói ph√¢n t√°ch ƒë√£ cho.
     * ? sort(): S·∫Øp x·∫øp c√°c ph·∫ßn t·ª≠ c·ªßa m·∫£ng theo th·ª© t·ª± Unicode v√† thay ƒë·ªïi m·∫£ng g·ªëc.
     */